// This program generates commands.go based off the available
// commands for the Redis 7+ server it connects to

// Subcommands are trimmed to the parent command
package main

import (
	"context"
	"log"
	"os"
	"regexp"
	"sort"
	"text/template"
	"time"

	set "github.com/deckarep/golang-set/v2"
	"github.com/redis/go-redis/v9"
)

func main() {
	tmpl := template.Must(template.New("").Parse(`
// Code generated by commandgen.go; DO NOT EDIT.
// ts={{ .Timestamp }}
// redisVer={{ .RedisVersion }}
package main

// RestrictedRWCommands lists commands that are not allowed for rw users
var RestrictedRWCommands = map[string]int{
{{- range $idx, $cmd := .RestrictedRWCommands }}
	{{ printf "%q" $cmd }}: {{ printf "%d" $idx }},
{{- end }}
}

// RestrictedROCommands lists commands that are not allowed for ro users
var RestrictedROCommands = map[string]int{
{{- range $idx, $cmd := .RestrictedRWCommands }}
	{{ printf "%q" $cmd }}: {{ printf "%d" $idx }},
{{- end }}
}

// AllowedRWCommands lists all the commands allowed for rw users
var AllowedRWCommands = map[string]int{
{{- range $idx, $cmd := .AllowedRWCommands }}
	{{ printf "%q" $cmd }}: {{ printf "%d" $idx }},
{{- end }}
}

// AllowedROCommands lists all the commands allowed for ro users
var AllowedROCommands = map[string]int{
{{- range $idx, $cmd := .AllowedROCommands }}
	{{ printf "%q" $cmd }}: {{ printf "%d" $idx }},
{{- end }}
}
`,
	))

	const (
		redisAddr         = ":6379"
		redisDialTimeout  = 2 * time.Second
		redisReadTimeout  = 2 * time.Second
		redisWriteTimeout = 2 * time.Second
		redisDB           = 0
	)

	subcommandRegexp := regexp.MustCompile(`\|\w+`)
	commandGroups := []string{"dangerous", "blocking", "connection", "pubsub", "write", "transaction"}
	rwCommandGroups := []string{"dangerous", "blocking", "connection", "pubsub", "transaction"}
	additionalRestrictedCommands := []string{"watch", "unwatch", "discard"}
	additionalRestrictedROCommands := []string{"keys", "scan"}
	additionalAllowedRWCommands := []string{"keys", "publish"}
	additionalAllowedCommands := []string{"ping", "echo"}
	commandGroupsMap := map[string][]string{}
	opts := &redis.Options{
		Addr:         redisAddr,
		DB:           redisDB,
		DialTimeout:  redisDialTimeout,
		ReadTimeout:  redisReadTimeout,
		WriteTimeout: redisWriteTimeout,
		ClientName:   "redis-rest-api-commandgen",
	}
	ctx := context.Background()
	client := redis.NewClient(opts)

	allResp := client.CommandList(ctx, &redis.FilterBy{})

	allCommands, err := allResp.Result()
	if err != nil {
		log.Fatal(err)
	}

	for i, cmd := range allCommands {
		allCommands[i] = subcommandRegexp.ReplaceAllString(cmd, "")
	}

	allCommandsSet := set.NewSet[string](allCommands...)

	for _, group := range commandGroups {
		resp := client.CommandList(ctx, &redis.FilterBy{ACLCat: group})
		commands, rerr := resp.Result()

		for i, cmd := range commands {
			commands[i] = subcommandRegexp.ReplaceAllString(cmd, "")
		}

		if rerr != nil {
			log.Fatal(err)
		}

		commandGroupsMap[group] = commands
	}

	versionRegexp := regexp.MustCompile(`redis_version:(?P<version>\d\.\d+\.\d+)`)
	info := client.Info(ctx, "server")
	matches := versionRegexp.FindStringSubmatch(info.String())
	idx := versionRegexp.SubexpIndex("version")
	version := matches[idx]
	rwCommands := []string{}
	roCommands := []string{}

	for _, group := range rwCommandGroups {
		rwCommands = append(rwCommands, commandGroupsMap[group]...)
	}

	rwCommandsSet := set.NewSet[string](append(rwCommands, additionalRestrictedCommands...)...)
	allowedRWCommands := set.NewSet[string](append(additionalAllowedCommands, additionalAllowedRWCommands...)...)
	rwCommandsSet = rwCommandsSet.Difference(allowedRWCommands)

	for _, group := range commandGroups {
		roCommands = append(roCommands, commandGroupsMap[group]...)
	}

	roRestrictedCommands := additionalRestrictedCommands
	roRestrictedCommands = append(roRestrictedCommands, additionalRestrictedROCommands...)
	roCommandsSet := set.NewSet[string](append(roCommands, roRestrictedCommands...)...)
	allowedROCommands := set.NewSet[string](additionalAllowedCommands...)
	roCommandsSet = roCommandsSet.Difference(allowedROCommands)

	allowedRWCommandSet := allCommandsSet.Difference(rwCommandsSet)
	allowedROCommandSet := allCommandsSet.Difference(roCommandsSet)

	rocs := roCommandsSet.ToSlice()
	rwcs := rwCommandsSet.ToSlice()
	arwcs := allowedRWCommandSet.ToSlice()
	arocs := allowedROCommandSet.ToSlice()

	sort.Strings(rocs)
	sort.Strings(rwcs)
	sort.Strings(arwcs)
	sort.Strings(arocs)

	f, err := os.Create("commands.go")
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	err = tmpl.Execute(f, struct {
		Timestamp            time.Time
		RedisVersion         string
		AllCommands          []string
		RestrictedROCommands []string
		RestrictedRWCommands []string
		AllowedROCommands    []string
		AllowedRWCommands    []string
	}{
		Timestamp:            time.Now().UTC(),
		RedisVersion:         version,
		RestrictedROCommands: rocs,
		RestrictedRWCommands: rwcs,
		AllowedROCommands:    arocs,
		AllowedRWCommands:    arwcs,
	})

	if err != nil {
		log.Println(err)
		return
	}
}
